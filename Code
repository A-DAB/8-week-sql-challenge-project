
/*distinct node_id*/
select distinct count(node_id) from customer_nodes;

/*nodes per region */
select 
  count(cn.node_id) as number_of_nodes,
   r.region_name 
    from customer_nodes as cn
    join
    regions as r using(region_id)
   group by r.region_name;    
  
  /*customers allocated to each region*/
  select 
   count(distinct cn.customer_id) as number_of_customers,
   r.region_name 
    from customer_nodes as cn
    join
    regions as r using(region_id)
   group by r.region_name; 
   
 /* average allocation days of customers*/
   
SELECT 
    AVG(DATEDIFF(end_date, start_date)) AS average_allocation_days
FROM customer_nodes
WHERE end_date != '9999-12-31';

/*What is the median, 80th and 95th percentile for this same reallocation days metric for each region*/
WITH cte AS (
    SELECT 
        r.region_name,
        DATEDIFF(cn.end_date, cn.start_date) AS allocation_days,
        PERCENT_RANK() OVER (PARTITION BY r.region_name ORDER BY DATEDIFF(cn.end_date, cn.start_date)) * 100 AS percentile_rank
    FROM 
        customer_nodes AS cn
    JOIN 
        regions AS r USING (region_id)
    WHERE 
        cn.end_date != '9999-12-31'
),

-- Get the closest value to each desired percentile for each region
percentiles AS (
    SELECT 
        region_name,
        
        -- Median
        MIN(CASE WHEN percentile_rank >= 50 THEN allocation_days END) AS median_allocation_days,

        -- 80th Percentile
        MIN(CASE WHEN percentile_rank >= 80 THEN allocation_days END) AS percentile_80_allocation_days,

        -- 95th Percentile
        MIN(CASE WHEN percentile_rank >= 95 THEN allocation_days END) AS percentile_95_allocation_days

    FROM 
        cte
    GROUP BY 
        region_name
)
SELECT * FROM percentiles;

/*What is the unique count and total amount for each transaction type*/

select 
     txn_type,
     count(txn_type) as unique_count,
     sum(txn_amount) as total_amount
     from customer_transactions
     group by txn_type;


/*What is the average total historical deposit counts and amounts for all customers*/

with cte as(select 
     customer_id,
     count(txn_type) as unique_count,
     sum(txn_amount) as total_amount
     from customer_transactions
     where txn_type ='deposit'
     group by customer_id
     order by customer_id
     
)
select 
     avg(unique_count) as average_deposit_count,
     avg(total_amount) as average_total_amount
     from cte;
     

/*For each month - how many Data Bank customers make more than 1 deposit and either 1 purchase or 1 withdrawal in a single month?*/
WITH transaction_count_per_month_cte AS
  (SELECT customer_id,
          month(txn_date) AS txn_month,
          SUM(IF(txn_type="deposit", 1, 0)) AS deposit_count,
          SUM(IF(txn_type="withdrawal", 1, 0)) AS withdrawal_count,
          SUM(IF(txn_type="purchase", 1, 0)) AS purchase_count
   FROM customer_transactions
   GROUP BY customer_id,
            month(txn_date))
SELECT txn_month,
       count(DISTINCT customer_id) as customer_count
FROM transaction_count_per_month_cte
WHERE deposit_count>1
  AND (purchase_count = 1
       OR withdrawal_count = 1)
GROUP BY txn_month;
   


/*What is the closing balance for each customer at the end of the month?*/   
 
   WITH txn_monthly_balance_cte AS
  (SELECT customer_id,
          month(txn_date) AS txn_month,
          SUM(CASE
                  WHEN txn_type="deposit" THEN txn_amount
                  ELSE -txn_amount
              END) AS net_transaction_amt
   FROM customer_transactions
   GROUP BY customer_id,month(txn_date)
   ORDER BY customer_id)
SELECT customer_id,
       txn_month,
       net_transaction_amt,
       sum(net_transaction_amt) over(PARTITION BY customer_id
                                     ORDER BY txn_month ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS closing_balance
FROM txn_monthly_balance_cte;




/*What is the percentage of customers who increase their closing balance by more than 5%?*/
 WITH txn_monthly_balance_cte AS
  (SELECT customer_id,
          month(txn_date) AS txn_month,
          SUM(CASE
                  WHEN txn_type="deposit" THEN txn_amount
                  ELSE -txn_amount
              END) AS net_transaction_amt
   FROM customer_transactions
   GROUP BY customer_id,month(txn_date)
   ORDER BY customer_id),
cte2 as(SELECT customer_id,
       txn_month,
       net_transaction_amt,
       sum(net_transaction_amt) over(PARTITION BY customer_id
                                     ORDER BY txn_month ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS closing_balance,
       rank() over(partition by customer_id order by txn_month asc) as rank_asc,
       rank() over(partition by customer_id order by txn_month desc) as rank_desc
       
FROM txn_monthly_balance_cte),

cte3 as (select 
   customer_id,
    max(case when rank_asc =1 then closing_balance end) as initial_balance,
    max(case when rank_desc =1 then closing_balance end) as final_balance
    from cte2
    group by customer_id
    ),
  cte4 as (select
      *,
       (final_balance-initial_balance)/abs(initial_balance) * 100 as pct_chg
      from cte3
      )
select 
    count(customer_id) as total_customers,
    sum(if(pct_chg>5,1,0)) as customers_increase_over_5_pct,
   sum(if(pct_chg>5,1,0)) * 100 / count(customer_id)   as customer_pct_over_5_pct_bal
    from cte4;    
		

/*
  To test out a few different hypotheses - the Data Bank team wants to run an experiment where different groups of customers would be allocated data using 3 different options:

    Option 1: data is allocated based off the amount of money at the end of the previous month
    Option 2: data is allocated on the average amount of money kept in the account in the previous 30 days
    Option 3: data is updated real-time

For this multi-part challenge question - you have been requested to generate the following data elements to help the Data Bank team estimate how much data will need to be provisioned for each option:

    running customer balance column that includes the impact each transaction
    customer balance at the end of each month
    minimum, average and maximum values of the running balance for each customer

Using all of the data available - how much data would have been required for each option on a monthly basis?
*/

/*running customer balance that includes the impact each transaction*/

 WITH txn_running_balance_cte AS
  (SELECT customer_id,
       txn_date,
       max(txn_type) as transaction_type,
          SUM(CASE
                  WHEN txn_type="deposit" THEN txn_amount
                  ELSE -txn_amount
              END) net_transaction_amt
   FROM customer_transactions
   GROUP BY customer_id,txn_date
   ORDER BY customer_id)
SELECT customer_id,
       txn_date,
       transaction_type,
       net_transaction_amt,
       sum(net_transaction_amt) over(PARTITION BY customer_id
                                     ORDER BY txn_date ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS Running_balance
FROM txn_running_balance_cte;


/*minimum, average and maximum values of the running balance for each customer*/

 WITH txn_running_balance_cte AS
  (SELECT customer_id,
       txn_date,
       max(txn_type) as transaction_type,
          SUM(CASE
                  WHEN txn_type="deposit" THEN txn_amount
                  ELSE -txn_amount
              END) net_transaction_amt
   FROM customer_transactions
   GROUP BY customer_id,txn_date
   ORDER BY customer_id),
running_balance as (SELECT customer_id,
       txn_date,
       transaction_type,
       net_transaction_amt,
       sum(net_transaction_amt) over(PARTITION BY customer_id
                                     ORDER BY txn_date ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS Running_balance
FROM txn_running_balance_cte)
select 
      customer_id,
      min(Running_balance) as minimum_running_bal,
      max(Running_balance) as max_running_bal,
      avg(Running_balance) as avg_running_bal
	from
      running_balance
    group by customer_id;  
      

/*customer balance at end of each month*/
 WITH txn_monthly_balance_cte AS
  (SELECT customer_id,
          month(txn_date) AS txn_month,
          SUM(CASE
                  WHEN txn_type="deposit" THEN txn_amount
                  ELSE -txn_amount
              END) AS net_transaction_amt
   FROM customer_transactions
   GROUP BY customer_id,month(txn_date)
   ORDER BY customer_id)
SELECT customer_id,
       txn_month,
       net_transaction_amt,
       sum(net_transaction_amt) over(PARTITION BY customer_id
                                     ORDER BY txn_month ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS closing_balance
FROM txn_monthly_balance_cte;


/*Data is allocated based off the amount of money at the end of the previous month*/
WITH txn_monthly_balance_cte AS
  (SELECT customer_id,
          month(txn_date) AS txn_month,
          SUM(CASE
                  WHEN txn_type="deposit" THEN txn_amount
                  ELSE -txn_amount
              END) AS net_transaction_amt
   FROM customer_transactions
   GROUP BY customer_id,month(txn_date)
   ORDER BY customer_id),
month_end_bal as (SELECT customer_id,
       txn_month,
       net_transaction_amt,
       sum(net_transaction_amt) over(PARTITION BY customer_id
                                     ORDER BY txn_month ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS closing_balance
FROM txn_monthly_balance_cte
 )
 select
     txn_month,
     sum(if(closing_balance>0,closing_balance,0)) as data_required_per_month
   from month_end_bal
   group by txn_month
   order by txn_month;
   
/* Data is allocated on the average amount of money kept in the account in the previous 30 days */

 WITH txn_running_balance_cte AS
  (SELECT customer_id,
       txn_date,
       max(txn_type) as transaction_type,
          SUM(CASE
                  WHEN txn_type="deposit" THEN txn_amount
                  ELSE -txn_amount
              END) net_transaction_amt
   FROM customer_transactions
   GROUP BY customer_id,txn_date
   ORDER BY customer_id),
running_balance as (SELECT customer_id,
       txn_date,
       transaction_type,
       net_transaction_amt,
       sum(net_transaction_amt) over(PARTITION BY customer_id
                                     ORDER BY txn_date ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS Running_balance
FROM txn_running_balance_cte),
avg_balance_cte as(
    select
          customer_id, 
          month(txn_date) as txn_month,
          avg(Running_balance)  AS avg_balance
          
   from running_balance
   group by customer_id,month(txn_date)
   order by customer_id
 )
 select
      txn_month,
      round(sum(if(avg_balance>0,avg_balance,0))) as monthly_data_req
      
  from avg_balance_cte
	group by txn_month
	order by txn_month;
    
 /* Data is updated real-time*/ 
  WITH txn_running_balance_cte AS
  (SELECT customer_id,
       txn_date,
       max(txn_type) as transaction_type,
          SUM(CASE
                  WHEN txn_type="deposit" THEN txn_amount
                  ELSE -txn_amount
              END) net_transaction_amt
   FROM customer_transactions
   GROUP BY customer_id,txn_date
   ORDER BY customer_id),
running_balance as (SELECT customer_id,
       txn_date,
       month(txn_date) as txn_month,
       transaction_type,
       net_transaction_amt,
       sum(net_transaction_amt) over(PARTITION BY customer_id
                                     ORDER BY txn_date ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) AS Running_balance
FROM txn_running_balance_cte)
select
      txn_month,
      sum(if(running_balance>0,running_balance,0)) as monthly_data_req      
   from running_balance
   group by txn_month
   order by txn_month
   
      
      
      
 
 
